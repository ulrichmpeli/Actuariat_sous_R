#===============================================================================#
#=============             PROJET : Actuariat sous               ===============#
#============= THEME : Tarification des contrats multi-garanties ===============#
#=============    Etudiants : François TCHANGAÏ, Ulrich MPELI    ===============#
#=============               Enseignant : C DUTANG               ===============#
#========================= ENSAE PARISTECH, 2016-2017 ==========================#

# ------------------------------------------------------------------------------#
# PREAMBULE
# ------------------------------------------------------------------------------#

rm(list=ls())
cat("\014") 

# ------------------------------------------------------------------------------#
# Installation des packages
# ------------------------------------------------------------------------------#

install.packages("CASdatasets", repos = "http://dutangc.free.fr/pub/RRepos/", 
                 type="source")
install.packages(fitdistrplus)
install.packages(copula)
install.packages(MASS)
install.packages(reliaR)
install.packages(QRM)
install.packages(xtable)
install.packages(psych)
install.packages(gamlss)
install.packages(pscl)
install.packages(xtable)

# ------------------------------------------------------------------------------#
# Chargement des packages
# ------------------------------------------------------------------------------#

library(CASdatasets)
library(fitdistrplus)
library(copula)
library(MASS)
library(reliaR)
library(QRM)
library(xtable)
library(psych)
library(gamlss)
library(pscl)
library(xtable)

# ------------------------------------------------------------------------------#
# Chargement de de la base de données
# ------------------------------------------------------------------------------#

data(danishmulti)
data = danishmulti

# ------------------------------------------------------------------------------#
# Analyse exploratoire des données
# ------------------------------------------------------------------------------#

#== Nombre et montant des sinistres par année de survenance ==#

str(data$Date)
data$annee=format(data$Date, format = "%Y")
tab1=table(data$annee)
tab2=aggregate(data$Total,list(Annee = data$annee),sum)

xtable(tab1)
xtable(tab2)

#== Analyse du montant des sinistres suivant les garanties ==#

summary(data$Building)
sum(data$Building)
quantile(data$Building, c(.995, .999))
sum(data$Building!=0)/2167

summary(data$Contents)
sum(data$Contents)
quantile(data$Contents, c(.995, .999))
sum(data$Contents!=0)/2167

summary(data$Profits)
sum(data$Profits)
quantile(data$Profits, c(.995, .999))
sum(data$Profits!=0)/2167

#== Analyse des queues de distribution ==#

# Quantiles à 99,5% et 99,9% #
quantile(data$Total, c(.95, .999))

# Sélection des plus gros sinistres #

data1 = data[data$Total>=34.823731,]

# ------------------------------------------------------------------------------#
# Estimation des paramètres des copules
# ------------------------------------------------------------------------------#

#== Mesures de dépendance ==#

data2 = data[,c(2,3,4)]

# corrélation de pearson#
cor.pearson<-cor(data2, method = "pearson")
cor.pearson
xtable(cor.pearson)

#corrélation de spearman#
cor.spearman<-cor(data2, method = "spearman")
cor.spearman
xtable(cor.spearman)


#corrélation de kendall#
cor.kendall<-cor(data2, method = "kendall")
cor.kendall
xtable(cor.kendall)


#== Dépendance de queues ==#

Bulding<-pobs(data$Building, ties.method = "max")
Contents<-pobs(data$Contents, ties.method = "max")
Profits<-pobs(data$Profits, ties.method = "max")

# dépendance de queue supérieure #
plot(Bulding,Contents)
plot(Bulding,Profits)
plot(Contents,Profits)

data3 = cbind(Bulding,Contents,Profits)

lambda.l.true<-fitLambda(data3)
lambda.u.true<-fitLambda(data3, lower.tail=FALSE)

xtable(lambda.l.true)
xtable(lambda.u.true)

#== Estimation des paramètres ==#


# Copule gaussienne #

normal.cop <- normalCopula(c(0,0,0),dim=3,dispstr="un")
(fit.ml.norm <- fitCopula(normal.cop, data3, method="ml"))
(fit.mpl.norm <- fitCopula(normal.cop, data3, method="mpl"))
(fit.itau.norm <- fitCopula(normal.cop, data3, method="itau"))
(fit.irho.norm <- fitCopula(normal.cop, data3, method="irho"))

# Copule de student #

(t.cop <- tCopula(c(0,0,0),dim=3,dispstr="un"))
fit.ml.t <- fitCopula(t.cop, data3, method="ml")
summary(fit.ml.t)
fit.mpl.t <- fitCopula(t.cop, data3, method="mpl") # la variance asymptotique ne peut pas être estimé
summary(fit.mpl.t)
(fit.itau.t <- fitCopula(t.cop, data3, method="itau")) # ne peut pas estimer df
(fit.irho.t <- fitCopula(t.cop, data3, method="irho")) # ne peut pas estimer df
fit.itau.mpl.t <- fitCopula(t.cop, data3, method="itau.mpl") #la variance asymptotique ne peut pas être estimé
summary(fit.itau.mpl.t)

# Copule de Gumbel #

gumbel.cop <- gumbelCopula(dim=3)
fit.ml.gumbel <- fitCopula(gumbel.cop, uvw, method="ml")
summary(fit.ml.gumbel)
(fit.mpl.gumbel <- fitCopula(gumbel.cop, uvw, method="mpl")) # la variance asymptotique ne peut pas être estimé
fit.itau.gumbel <- fitCopula(gumbel.cop, uvw, method="itau") # ne peut pas estimer df
summary(fit.itau.gumbel)
fit.irho.gumbel <- fitCopula(gumbel.cop, uvw, method="irho") # ne peut pas estimer df
summary(fit.irho.gumbel)


